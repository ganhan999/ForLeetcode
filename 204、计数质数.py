"""
统计所有小于非负整数n的质数的数量。


示例 1：
输入：n = 10
输出：4
解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。

示例 2：
输入：n = 0
输出：0

示例 3：
输入：n = 1
输出：0


"""


"""
筛选法
质数的倍数一定不是质数
"""
#大神做法1
class Solution:
    def countPrimes(self, n: int) -> int:
        #给每个位置立一个flag，初始化为1
        isPrimes = [1] * n
        #result，输出的质数总个数的计数器，初始化为0
        res = 0
        #循环，从最小质数i开始到n循环
        for i in range(2, n):
            #如果这个位置的flag为1，说明数字 i  没有被比 i 小的数整除过，说明它是质数，计数器+1
            if isPrimes[i] == 1: res += 1
            #下面这几步的思路是， i 的倍数一定不是质数，将这些数的flag设置为0
            #设置倍数 j ，初始化与 i 相等。 因为i也是一点点加上来的，比如 i=5的时候，i 的4倍一定在 i=4 时已经设置为0过。
            j = i#标记应该从i∗i 开始，而不是 2∗i 开始。因为对于每个数 i 来说，枚举是从小到大的，此时前面数字的倍数都已经进行了标记。对于 i而言，2∗i 也肯定会被在枚举数字 2 时进行标记，[2,i) 区间的数同理。

            #当 i 的 j 倍大于n的时候跳出循环
            while i * j < n:
                #设置i 的 j 倍的flag为0
                isPrimes[i * j] = 0
                # 自增，下一个找 j+1 倍
                j += 1
        #返回结果
        return res



