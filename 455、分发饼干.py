"""
假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。

对每个孩子 i，都有一个胃口值g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j]。如果 s[j]>= g[i]，
我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。


示例1:
输入: g = [1,2,3], s = [1,1]
输出: 1
解释:
你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
所以你应该输出1。

示例2:
输入: g = [1,2], s = [1,2,3]
输出: 2
解释:
你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
你拥有的饼干数量和尺寸都足以让所有孩子满足。
所以你应该输出2.



"""


"""
排序+贪心算法
1、对每个值进行倒序排序
2、保障让每一个饼干刚好满足当前的小朋友，就可以使得最后满足的人数最多。
"""
#大神做法1

class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        ##典型的贪心算法：先排序，倒序最好。让最大饼干的满足最贪心的小朋友，如果当前的饼干不能满足当前的小朋友，就找下一个小朋友看是否能满足
        gi = 0 ## g:小朋友的胃口，也就是贪心值
        si = 0 ## s:饼干值
        g.sort(reverse=True) ##倒序输出
        s.sort(reverse=True)
        res = 0
        lens_g = len(g)
        lens_s = len(s)
        while gi<lens_g and si<lens_s:
            if s[si]>=g[gi]:
                res+=1
                si+=1
                gi+=1
            else:
                gi+=1 ##看一下小朋友的胃口是否能满足当前的饼干
        return res




