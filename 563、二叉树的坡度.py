"""
给定一个二叉树，计算 整个树 的坡度 。
一个树的 节点的坡度 定义即为，该节点左子树的节点之和和右子树节点之和的 差的绝对值 。如果没有左子树的话，左子树的节点之和为 0 ；
没有右子树的话也是一样。空结点的坡度是 0 。
整个树 的坡度就是其所有节点的坡度之和。



示例 1：
输入：root = [1,2,3]
输出：1
解释：
节点 2 的坡度：|0-0| = 0（没有子节点）
节点 3 的坡度：|0-0| = 0（没有子节点）
节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）
坡度总和：0 + 0 + 1 = 1

示例 2：
输入：root = [4,2,9,3,5,null,7]
输出：15
解释：
节点 3 的坡度：|0-0| = 0（没有子节点）
节点 5 的坡度：|0-0| = 0（没有子节点）
节点 7 的坡度：|0-0| = 0（没有子节点）
节点 2 的坡度：|3-5| = 2（左子树就是左子节点，所以和是 3 ；右子树就是右子节点，所以和是 5 ）
节点 9 的坡度：|0-7| = 7（没有左子树，所以和是 0 ；右子树正好是右子节点，所以和是 7 ）
节点 4 的坡度：|(3+5+2)-(9+7)| = |10-16| = 6（左子树值为 3、5 和 2 ，和是 10 ；右子树值为 9 和 7 ，和是 16 ）
坡度总和：0 + 0 + 0 + 2 + 7 + 6 = 15

示例 3：
输入：root = [21,7,14,1,1,2,2,3,3]
输出：9



"""


"""
思路：对于递归问题，首先应该思考的是：原问题是否可以分解成若干字问题的解，且原问题与子问题具有相同的性质。
对于该问题，目的是为了求解每个节点的坡度，因此函数返回值应该整个子树的坡度和(pl+pr+p),由于跟节点的坡度，取决于左右子树节点和的差，
因此可以定义如下表达式：s, p = f(root),即对于跟节点root，返回节点和，和累积坡度，函数的返回值取决于计算的需要。
递归方程
sl, pl = search(root.left)
sr, pr = search(root.right)
return sr + sl + root.val, abs(sl - sr) + pl + pr
sl，sr为左右子树的节点累加值，pl，pr为左右子树的累加坡度
"""
#大神做法1
class Solution:
    def findTilt(self, root: TreeNode) -> int:

        def search(root: TreeNode) -> (int, int):  # 返回节点和，累积坡度
            if not root:
                return 0, 0
            else:
                sl, pl = search(root.left)  # 递归求解子问题
                sr, pr = search(root.right)  # 递归求解子问题
                return sr + sl + root.val, abs(sl - sr) + pl + pr  # 跟节点的节点和，累积坡度与子问题的递归关系（合并子问题，形成原问题的解）
        _, p = search(root)
        return p


