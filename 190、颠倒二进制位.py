"""
颠倒给定的 32 位无符号整数的二进制位。

示例 1：
输入: 00000010100101000001111010011100
输出: 00111001011110000010100101000000
解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

示例 2：
输入：11111111111111111111111111111101
输出：10111111111111111111111111111111
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
    因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。



"""


"""
从最后一位开始遍历，每次都将最后一位放到它该去的地方
"""
#我的做法
class Solution:
    def reverseBits(self, n):
        ret, power = 0, 31
        while n:
            ret += (n & 1) << power#n & 1表示最后一位，<< power表示左移多少位
            n = n >> 1
            power -= 1
        return ret


#大神做法1

"""
首先，我们将原来的 32 位分为 2 个 16 位的块。
然后我们将 16 位块分成 2 个 8 位的块。
然后我们继续将这些块分成更小的块，直到达到 1 位的块。
在上述每个步骤中，我们将中间结果合并为一个整数，作为下一步的输入。


"""

class Solution:
    def reverseBits(self, n):
        n = (n >> 16) | (n << 16)
        n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8)
        n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4)
        n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2)
        n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1)
        return n



#大神做法2

"""
转str，再reverse，再转回来
"""


class Solution:
    def reverseBits(self, n: int) -> int:
        a=list(bin(n))[2:]
        num=32-len(a)
        a.reverse()
        b="".join(a)+'0'*num
        return int(b,base=2)
